get:
  summary: List All Checks
  description: Get a list of monitoring checks.
  operationId: listChecks
  tags:
    - Checks
  parameters:
    - $ref: ../components/parameters/max.yaml
    - $ref: ../components/parameters/offset.yaml
    - $ref: ../components/parameters/sort.yaml
    - $ref: ../components/parameters/name.yaml
    - $ref: ../components/parameters/phrase.yaml
    - $ref: ../components/parameters/checkHealthStatus.yaml
    - $ref: ../components/parameters/lastUpdated.yaml
    - $ref: ../components/parameters/deleted.yaml
  responses:
    '200':
      description: Array of Checks
      content:
        application/json:
          schema:
            allOf:
            - type: object
              properties:
                checks:
                  type: array
                  items:
                    $ref: ../components/schemas/check.yaml
            - $ref: ../components/schemas/meta.yaml
          examples:
            Checks Response:
              value:
                $ref: ../components/examples/checks.json
    '4XX':
      $ref: ../components/responses/4xx.yaml
    '5XX':
      $ref: ../components/responses/5xx.yaml
post:
  summary: Create a New Check
  description: |
    Create a new monitoring check.

    SSH tunneling options allow the different check types to tunnel to a host via a proxy, and execute checks relative to the proxy. A SSH tunnel can use your account generated public and private key-pairs or SSH password. It is strongly recommended to use a key-pair.

    To enable SSH tunneling for a check, add `tunnelOn`, `sshHost`, `sshUser`, and optionally, `sshPort` and `sshPassword` parameters to any check type config as seen earlier in the Check Types section.
  operationId: addChecks
  tags:
    - Checks
  requestBody:
    content:
      application/json:
        schema:
          type: object
          required:
            - check
          properties:
            check:
              type: object
              description: Payload for creating a new monitoring check
              required:
                - name
                - checkType
              oneOf:
              - $ref: ../components/schemas/checkWeb.yaml
              - $ref: ../components/schemas/checkSql.yaml
              - $ref: ../components/schemas/checkSocket.yaml
              - $ref: ../components/schemas/checkElastic.yaml
              - $ref: ../components/schemas/checkPush.yaml
        examples:
          Check Request - Web:
            value:
              $ref: ../components/examples/checkWebRequest.json
          Check Request - MySQL:
            value:
              $ref: ../components/examples/checkMysqlRequest.json
          Check Request with SSH - MySQL:
            value:
              $ref: ../components/examples/checkMysqlWSshRequest.json
          Check Request - SQL:
            value:
              $ref: ../components/examples/checkSqlRequest.json
          Check Request - Postgres:
            value:
              $ref: ../components/examples/checkPostgresqlRequest.json
          Check Request - Socket:
            value:
              $ref: ../components/examples/checkSocketRequest.json
          Check Request - ElasticSearch:
            value:
              $ref: ../components/examples/checkElasticsearchRequest.json
          Check Request - Push:
            value:
              $ref: ../components/examples/checkPushRequest.json
  responses:
    '200':
      description: Check Object
      content:
        application/json:
          schema:
            allOf:
            - type: object
              properties:
                check:
                  $ref: ../components/schemas/check.yaml
            - $ref: ../components/schemas/200-success.yaml
          examples:
            Check Response - Create Web Check:
              value:
                $ref: ../components/examples/checkWebSuccess.json
            Check Response - Create Web Check with SSH Tunneling:
              value:
                $ref: ../components/examples/checkWebSshTunnelingSuccess.json                
            Check Response - Create MySQL Check:
              value:
                $ref: ../components/examples/checkMysqlSuccess.json
            Check Response - Create SQL Check:
              value:
                $ref: ../components/examples/checkSqlSuccess.json
            Check Response - Create PostgreSQL Check:
              value:
                $ref: ../components/examples/checkPostgresqlSuccess.json
            Check Response - Create Socket Check:
              value:
                $ref: ../components/examples/checkSocketSuccess.json
            Check Response - Create ElasticSearch Check:
              value:
                $ref: ../components/examples/checkElasticsearchSuccess.json
            Check Response - Create Push Check:
              value:
                $ref: ../components/examples/checkPushSuccess.json
    '4XX':
      $ref: ../components/responses/4xx.yaml
    '5XX':
      $ref: ../components/responses/5xx.yaml